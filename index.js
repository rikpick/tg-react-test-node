const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');

const token = '5815922470:AAHcHI6ypUrgBa-VJYmUOmsml85Ax319-2U';
const webAppUrl = 'https://monumental-frangipane-34ce90.netlify.app';
const managerChatId = '-1001836297880';

const bot = new TelegramBot(token, {polling: true});
const app = express();

app.use(express.json());
app.use(cors());


bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if(text === '/start') {
    await bot.sendMessage(chatId, 'üëá–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–∞–≥–∞–∑–∏–Ω"', {
        
    })
    await bot.sendPhoto({
    chat_id : chatId,
    photo: 'tovar.jpg'
    })
  }

  if(msg?.web_app_data?.data) {
    try {
      const data = JSON.parse(msg?.web_app_data?.data)
      await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!')

    } catch (e) {
      console.log(e);
    }
  }
});

app.post('/web-data/', async (req, res) => {
  const {queryId, products, totalPrice, address, username, pay, name, sort, klad} = req.body;

  try {
     await bot.answerWebAppQuery(queryId, {
      type: 'article',
      id: queryId,
      title: '–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
      input_message_content: {message_text:
         '–í–∞—à –∑–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.'}
     })

     if (req.body) {
      
        bot.sendMessage(managerChatId, name ?
        `<strong>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> @${name ? name : '–Ω–µ—Ç—É'}
<strong>–ù–∞ —Å—É–º–º—É:</strong> ${totalPrice} –≥—Ä–Ω 
<strong>–°–æ—Ä—Ç:</strong> ${sort} 
<strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> ${products.map(item => item.title).join(', ')}
<strong>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> ${klad}
<strong>–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞:</strong> ${address}
<strong>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</strong> ${pay}`
 : 
 `<strong>–ó–∞–∫–∞–∑ –æ—Ç:</strong> <a href="tg://user?id=${username}">–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</a>
<strong>–ù–∞ —Å—É–º–º—É:</strong> ${totalPrice} –≥—Ä–Ω 
<strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> ${products.map(item => item.title).join(', ')}
<strong>–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞:</strong> ${address}
<strong>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</strong> ${pay}`, {parse_mode: 'HTML'});
      
    }

     return res.status(200).json({});
  } catch (e) {
    await bot.answerWebAppQuery(queryId, {
      type: 'article',
      id: queryId,
      title: '–ù–µ –¥–∞–ª–æ—Å—å',
      input_message_content: {message_text: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!'}
     })
     return res.status(500).json({});

  }

  
})

const PORT = process.env.PORT || 8000;
app.listen(PORT, "0.0.0.0", () => console.log(`Server running on port ${PORT}`));