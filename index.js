const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');

const token = '5815922470:AAHcHI6ypUrgBa-VJYmUOmsml85Ax319-2U';
const webAppUrl = 'https://monumental-frangipane-34ce90.netlify.app';
const managerChatId = '-1001836297880';
const newUsersChat = '-1002093091761';


const bot = new TelegramBot(token, {polling: true});
const app = express();

app.use(express.json());
app.use(cors());

try {
  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
  
    
  
    if(text === '/start') {
      await bot.sendMessage(chatId, `
      ‚úÖ–ê–ö-47
      –í—Å–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ä—Ç, –º—è–≥–∫–∞—è —Å–∞—Ç–∏–≤–∞, 15-16% —Ç–≥–∫, –ø–æ—Ä–∞–¥—É–µ—Ç —Å–≤–æ–∏–º –º—è–≥–∫–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º –Ω–æ –º–µ–∂–∏ –æ–≥–æ—Ä—á–∏—Ç—å –º–∞–ª–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Å–æ–±–æ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ã—Ö.
      
      ‚úÖTutankhamon
      –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–º–µ—Å—å –∏–Ω–¥–∏–∫–∏ –∏ —Å–∞—Ç–∏–≤—ã, 21% —Ç–≥–∫, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏ —Å—Ä–µ–¥–Ω—è—è –º–æ—â–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ä—Ç–∞ –º—ã –±—ã –Ω–∞–∑–≤–∞–ª–∏ –Ω–∏—á–µ–º –∏–Ω—ã–º –∫–∞–∫ –±–∞–ª–∞–Ω—Å–æ–º.
      
      ‚úÖSuper Skunk 
      –ò–Ω–¥–∏–∫–∞, 17-19% —Ç–≥–∫, –º—è–≥–∫–∏–π –Ω–∞–∫—É—Ä, –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ —Å–∏–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç.
      
      ‚úÖLemon Haze 
      –°–∞—Ç–∏–≤–∞, 17% —Ç–≥–∫, –¥–∞–Ω–Ω—ã–π —Å–æ—Ä—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è –ª–∏–º–æ–Ω–Ω—ã–º –∞—Ä–æ–º–∞—Ç–æ–º, –∏ –±—ã—Å—Ç—Ä—ã–º —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º.
      
      ‚úÖBruce Benner 
      65% —Å–∞—Ç–∏–≤–∞ 35% –∏–Ω–¥–∏–∫–∞, —É—Ä–æ–≤–µ–Ω—å —Ç–≥–∫ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ 25%, –æ—á–µ–Ω—å –º–æ—â–Ω—ã–π —Å–æ—Ä—Ç —Å –ø—Ä–∏—è—Ç–Ω—ã–º–∏ —Ñ—Ä—É–∫—Ç–æ–≤—ã–º–∏ –Ω–æ—Ç–∫–∞–º–∏.
      
      ‚úÖBig Dewil 
      40% –Ü–Ω–¥–∏–∫–∞/47,5% –°–∞—Ç–∏–≤–∞/12,5% –†—É–¥–µ—Ä–∞–ª—ñ—Å, 15-20% —Ç–≥–∫, —Å–º–µ—Å—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–≤—à–∞—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–µ–Ω–æ—Ç–∏–ø —Å –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º.`)
      await bot.sendMessage(chatId, 'üëá–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–∞–≥–∞–∑–∏–Ω"');
  
      await bot.sendMessage(newUsersChat, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.from.id}, ${msg.from.username}, ${msg.from.is_bot}`
  
      )
  
    } else {
      await bot.sendMessage(newUsersChat, `—Å–ø–∞–º ${msg.from.id}, ${msg.from.username}`
  
      )
    }
  
    if(msg?.web_app_data?.data) {
      try {
        const data = JSON.parse(msg?.web_app_data?.data)
        await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!')
  
      } catch (e) {
        console.log(e);
      }
    }
  });
} catch (e) {
  console.log(e)
}



app.post('/web-data/', async (req, res) => {
  const {queryId, products, totalPrice, address, username, pay, name, sort, klad} = req.body;

  try {
     await bot.answerWebAppQuery(queryId, {
      type: 'article',
      id: queryId,
      title: '–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
      input_message_content: {message_text:
         '–í–∞—à –∑–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.'}
     })

     if (req.body) {
      
        bot.sendMessage(managerChatId, name ?
        `<strong>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> @${name ? name : '–Ω–µ—Ç—É'}
<strong>–ù–∞ —Å—É–º–º—É:</strong> ${totalPrice} –≥—Ä–Ω 
<strong>–°–æ—Ä—Ç:</strong> ${sort} 
<strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> ${products.map(item => item.title).join(', ')}
<strong>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> ${klad}
<strong>–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞:</strong> ${address}
<strong>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</strong> ${pay}`
 : 
 `<strong>–ó–∞–∫–∞–∑ –æ—Ç:</strong> <a href="tg://user?id=${username}">–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</a>
<strong>–ù–∞ —Å—É–º–º—É:</strong> ${totalPrice} –≥—Ä–Ω 
<strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> ${products.map(item => item.title).join(', ')}
<strong>–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞:</strong> ${address}
<strong>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</strong> ${pay}`, {parse_mode: 'HTML'});
      
    }

     return res.status(200).json({});
  } catch (e) {
    await bot.answerWebAppQuery(queryId, {
      type: 'article',
      id: queryId,
      title: '–ù–µ –¥–∞–ª–æ—Å—å',
      input_message_content: {message_text: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!'}
     })
     return res.status(500).json({});

  }

  
})

const PORT = process.env.PORT || 8000;
app.listen(PORT, "0.0.0.0", () => console.log(`Server running on port ${PORT}`));